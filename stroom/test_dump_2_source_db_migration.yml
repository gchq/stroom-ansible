---
########### LOCALHOST  ###########

- name: Verify local_config_dir is set up
  import_playbook: ./verify_local_config_dir_exists.yml

################### SETUP HOST(S) ###################

- name: Setup stroom hosts
  import_playbook: ./setup_stroom_hosts.yml
  tags:
    - setup

################### Install Java ###################

- hosts:
    - all
  gather_facts: true # Needed for yum stuff
  tasks:

    - import_role:
        name: setup/java
      vars:
        java_version:  "{{ java_version_to }}"

    #- import_role:
        #name: stack/open_ports


        
- hosts:
    - all
  gather_facts: true # Needed for yum stuff
  become: true
  become_user: "{{ stroom_user }}"
  vars:
      # Normally we would deploy a stack on top of another but if we do that we
      # can't go back as the config is different
    - stack_dir_from: "{{ migration_dir }}/stack-{{ stroom_version_from }}"
    - stack_dir_to: "{{ migration_dir }}/stack-{{ stroom_version_to }}"
  tasks:

    ################### TEAR DOWN ###################

      # Remove the from stack dir
    - name: Ensure '{{ stack_dir_from }}' is absent
      file:
        path: "{{ stack_dir_from }}"
        state: absent
      tags:
        - teardown

      # Remove the to stack dir
    - name: Ensure '{{ stack_dir_to }}' is absent
      file:
        path: "{{ stack_dir_to }}"
        state: absent
      tags:
        - teardown

      # Remove the whole migration dir only if we want to remove the compiled source
      # as it takes so long to compile
    - name: Ensure '{{ migration_dir}}' is absent
      file:
        path: "{{ migration_dir }}"
        state: absent
      tags:
        - never
        - clean_compiled
        - teardown

      # Remove the stroom temp dir that contains the stream store
    - name: Ensure '{{ stroom_temp_dir }}' is absent
      file:
        path: "{{ stroom_temp_dir }}"
        state: absent
      tags:
        - teardown

    - import_role:
        name: stack/delete
      vars:
        stack_version: "{{ stroom_version_from }}"
        stack_install_root_dir: "{{ stack_dir_from }}"
      tags:
        - teardown

    - import_role:
        name: stack/delete
      vars:
        stack_version: "{{ stroom_version_to }}"
        stack_install_root_dir: "{{ stack_dir_to }}"
      tags:
        - teardown

    ################### SET UP & RUN FROM VERSION ###################

    - import_role:
        name: stack/deploy
      vars:
        stack_version: "{{ stroom_version_from }}"
        stack_install_root_dir: "{{ stack_dir_from }}"

      # Change the stack so we only run up the DB.
      # If we run up the whole stack it will build the DBs
      # which we don't want.
    - import_role:
        name: stack/set_active_services
      vars:
        stack_install_root_dir: "{{ stack_dir_from }}"
        stack_version: "{{ stroom_version_from }}"
        services_to_run: "stroom-all-dbs"

      # Start up the DB
    - import_role:
        name: stack/ensure_state
      vars:
        stack_install_root_dir: "{{ stack_dir_from }}"
        stack_version: "{{ stroom_version_from }}"
        state: "started"

    - import_role:
        name: stack/import_dump
      vars:
        stack_install_root_dir: "{{ stack_dir_from }}"
      tags:
        - import_dump

      # Stop the stack
    - import_role:
        name: stack/ensure_state
      vars:
        stack_install_root_dir: "{{ stack_dir_from }}"
        stack_version: "{{ stroom_version_from }}"
        state: "stopped"


    ################### SET UP & RUN TO VERSION ###################

    - import_role:
        name: stack/deploy
      vars:
        stack_version: "{{ stroom_version_to }}"
        stack_install_root_dir: "{{ stack_dir_to }}"

      # Change the new stack to be just the services
    - import_role:
        name: stack/set_active_services
      vars:
        services_to_run: "nginx stroom-all-dbs stroom-auth-service stroom-ui"
        stack_install_root_dir: "{{ stack_dir_to }}"
        stack_version: "{{ stroom_version_to }}"

      # Start up all the services in the new stack
    - import_role:
        name: stack/ensure_state
      vars:
        stack_install_root_dir: "{{ stack_dir_to }}"
        stack_version: "{{ stroom_version_to }}"
        state: "started"

      # Download, build and run the db migration from stroom release
    - import_role:
        name: build_stroom_source
      vars:
        repo_name: "stroom"
        source_git_tag_or_hash: "{{ stroom_source_git_tag_or_hash_to }}"
        java_version:  "{{ java_version_to }}"
        gradle_args: "migrate -x test -x gwtCompile"
        unpack_dir: "{{ migration_dir }}"

      # It is nice to see the output of the migration
    - name: Migration stdout
      debug:
        msg: "{{ _build_info.stdout_lines | default('stdout_lines undefined') }}"

    - name: Migration stderr
      debug:
        msg: "{{ _build_info.stderr_lines | default('stderr_lines undefined') }}"
