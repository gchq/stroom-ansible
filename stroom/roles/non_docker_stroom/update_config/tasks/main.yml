---
#
# Stroom config

- name: Ensure directory {{ stroom_temp_dir }} exists
  file:
    path: "{{ stroom_temp_dir }}"
    state: directory
  tags:
    - deploy
    - configure

- name: Copy certs/ dir to {{ stroom_install_root_dir }}/stroom/
  copy:
    src: "{{ local_config_dir }}/certs"
    dest: "{{ stroom_install_root_dir }}/stroom/"
    local_follow: no
    follow: yes
  tags:
    - deploy
    - configure

- name: Add APP log delivery task to crontab
  cron:
    name: "Add STROOM-APP-EVENTS cronjob"
    state: present
    user: "{{ stroom_user }}"
    minute: "*"
    hour: "*"
    job: "{{ stroom_home_dir }}/bin/send_to_stroom.sh --cert {{ stroom_app_home_dir }}/certs/server.pem.crt --cacert {{ stroom_app_home_dir }}/certs/ca.pem.crt --delete-after-sending --file-regex '.*[a-z]+-[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}\\.log' --system STROOM --environment \"{{ environment_name }}\" {{ stroom_app_home_dir }}/logs/app/ STROOM_APP-EVENTS https://{{hostvars[groups['stroom_services_stack'][0]]['public_ip_address']}}/stroom/datafeeddirect >/dev/null 2>&1"
  tags:
    - deploy
    - configure
    
- name: Add ACCESS log delivery task to crontab
  cron:
    name: "Add STROOM-ACCESS-EVENTS cronjob"
    state: present
    user: "{{ stroom_user }}"
    minute: "*"
    hour: "*"
    job: "{{ stroom_home_dir }}/bin/send_to_stroom.sh --cert {{ stroom_app_home_dir }}/certs/server.pem.crt --cacert {{ stroom_app_home_dir }}/certs/ca.pem.crt --delete-after-sending --file-regex '.*[a-z]+-[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}\\.log' --system STROOM --environment \"{{ environment_name }}\" {{ stroom_app_home_dir }}/logs/access/ STROOM_ACCESS-EVENTS https://{{hostvars[groups['stroom_services_stack'][0]]['public_ip_address']}}/stroom/datafeeddirect >/dev/null 2>&1"
  tags:
    - deploy
    - configure
    
- name: Add USER log delivery task to crontab
  cron:
    name: "Add STROOM-USER-EVENTS cronjob"
    state: present
    user: "{{ stroom_user }}"
    minute: "*"
    hour: "*"
    job: "{{ stroom_home_dir }}/bin/send_to_stroom.sh --cert {{ stroom_app_home_dir }}/certs/server.pem.crt --cacert {{ stroom_app_home_dir }}/certs/ca.pem.crt --delete-after-sending --file-regex '.*[a-z]+-[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}\\.log' --system STROOM --environment \"{{ environment_name }}\" {{ stroom_app_home_dir }}/logs/user/ STROOM_USER-EVENTS https://{{hostvars[groups['stroom_services_stack'][0]]['public_ip_address']}}/stroom/datafeeddirect >/dev/null 2>&1"
  tags:
    - deploy
    - configure
    
# NOTE: It is debatable if we configure the file like this or use a jinja template file
# If we use templates then we need to maintain the template in this repo.
# For real deployments where a clone/fork of this repo is used, jinja templates
# would probably make more sense, and be a load faster.

  # TODO stroom.conf is no more in v7, needs removing
  # Set all the env vars in the stack env file
#- import_role:
    #name: non_docker_stroom/set_stroom_conf_values
  #tags:
    #- deploy
    #- configure

  # Some instances of IP_ADDRESS are not nginx_advertised_host, so they must be explicitly set
  # in set_stroom_conf_values above
#- name: Replace any instances of IP_ADDRESS in {{ stroom_conf_file }} with {{ nginx_advertised_host }}
  #replace:
    #path: "{{ stroom_conf_file }}"
    #regexp: 'IP_ADDRESS'
    #replace: "{{ nginx_advertised_host }}"

- debug:
    msg:
      - "stroom_config_files_and_templates_dir: {{ stroom_config_files_and_templates_dir }}"
    verbosity: 2
  tags:
    - deploy
    - configure

- name: "Check if {{ stroom_config_files_and_templates_dir }} exists on the Ansible controller"
  local_action: stat path={{ stroom_config_files_and_templates_dir }}
  become: false
  register: _stroom_config_files_and_templates_dir_info
  tags:
    - deploy
    - configure

  # Copies any files (except *.j2 files) as they are to the remote.
  # Will also follow symlinks on the controller
  # Mirrors the directory structure.
  # Will only add/update files on the remote, not delete.
  # To make deletion happen we would need to have all of the files
  # locally.
- name: Copy static files from {{ stroom_config_files_and_templates_dir }}/
        to {{ stroom_home_dir }}/
  copy:
    src: "{{ stroom_config_files_and_templates_dir }}/{{ item.path }}"
    dest: "{{ stroom_home_dir }}/{{ item.path }}"
    mode: "u=rw,g=,o="
    backup: true
  with_filetree: "{{ stroom_config_files_and_templates_dir }}/"
  loop_control:
    label: "{{ item.path }} (type: {{ item.state }}, source: {{ item.src | default('N/A') }})"
  when: _stroom_config_files_and_templates_dir_info.stat.exists 
        and (item.state == 'file' or item.state == 'link')
        and item.path is not match('.*\.j2$')
        and item.path is not match('.*\.gitkeep$') # Ignore .gitkeep files used to maintain empty dirs
  tags:
    - deploy
    - configure

  # Copies and templates any *.j2 files found in the tree, removing the .j2 extension.
  # Mirrors the directory structure.
  # Will only add/update files on the remote, not delete.
- name: Copy and template .j2 files from {{ stroom_config_files_and_templates_dir }}/
        to {{ stroom_home_dir }}/
  template:
    src: "{{ item.src }}/"
    dest: "{{ stroom_home_dir }}/{{ item.path | regex_replace('.j2$','') }}"
    mode: "u=rw,g=,o="
    backup: true
  with_filetree: "{{ stroom_config_files_and_templates_dir }}/"
  loop_control:
    label: "{{ item.path }} (type: {{ item.state }}, source: {{ item.src | default('N/A') }})"
  when: _stroom_config_files_and_templates_dir_info.stat.exists 
        and item.state == 'file'
        and item.path is match('.*\.j2$')
        and item.path is not match('.*\.gitkeep$') # Ignore .gitkeep files used to maintain empty dirs
  tags:
    - deploy
    - configure

# Needed for calling python, TODO use script module
#- name: Get absolute path 
  #command: "realpath {{ local_config_dir }}"
  #register: absolute_path

## TODO rewrite with lineinfile, replace et al.
#- name: Update the local stroom.conf file from the inventory
  #command: "python3 ./scripts/update_stroom_conf_file.py {{ absolute_path.stdout }}/stroom"

#- name: Enable content pack import
  #lineinfile:
    #path: "{{ stroom_conf_file }}"
    #regexp: '^\s*#?\s*(stroom\.contentPackImportEnabled)=false\s*$'
    #line: '\1=true'
    #backrefs: true

#- name: Un-comment internal stat entries to disable stroom-stats internal stats
  #replace:
    #path: "{{ stroom_conf_file }}"
    #regexp: '^\s*#\s*(stroom\.internalstatistics\..*)$'
    #replace: '\1'

