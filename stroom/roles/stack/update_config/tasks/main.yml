---

- name: 'Check mandatory variables are defined'
  assert:
    that:
      - downloads_dir is defined
      - local_config_dir is defined
      - stack_env_vars is defined
      - stack_install_root_dir is defined
      - stack_name is defined
      - stack_version is defined
      - stroom_user is defined

- name: "Apply the local .env.j2 template {{ local_templated_env_file_path }} to {{ stack_env_var_file }}"
  template:
    src: "{{ local_templated_env_file_path }}"
    dest: "{{ stack_env_var_file }}"
    mode: "u=rw,g=r,o=r"
    backup: true
  when: local_templated_env_file_path is defined

- name: "Apply the templated env file supplied in the stack release"
  when: local_templated_env_file_path is undefined
  include_tasks: apply_supplied_env_file_template.yml

- debug:
    msg:
      - "config_files_and_templates_dir: {{ config_files_and_templates_dir }}"
    verbosity: 2
  tags:
    - deploy
    - configure

- name: "Check if {{ config_files_and_templates_dir }} exists on the Ansible controller"
  local_action: stat path={{ config_files_and_templates_dir }}
  become: false
  run_once: true
  register: _config_files_and_templates_dir_info
  tags:
    - deploy
    - configure

  # Copies any files (except *.j2 files) as they are to the remote.
  # Mirrors the directory structure.
  # Will only add/update files on the remote, not delete.
  # To make deletion happen we would need to have all of the volumes dir
  # locally.
  # TODO The files in the volumes dir need to be accessed by the user inside
  # the container which may have a different uid to the host user, thus we
  # need to open up read to g and o
- name: "Copy static files from {{ config_files_and_templates_dir }}/ to {{ stack_volumes_dir }}/"
  copy:
    src: "{{ item.src }}"
    dest: "{{ stack_volumes_dir }}/{{ item.path }}"
    mode: "u=rw,g=r,o=r"
    backup: true
  with_filetree: "{{ config_files_and_templates_dir }}/"
  loop_control:
    label: "{{ item.path }}"
  when: _config_files_and_templates_dir_info.stat.exists 
        and item.state == 'file' 
        and item.path is not match('.*\.j2$')
        and item.path is not match('.*\.gitkeep$') # Ignore .gitkeep files used to maintain empty dirs
  tags:
    - deploy
    - configure

  # Copies and templates any *.j2 files found in the tree, removing the .j2 extension.
  # Mirrors the directory structure.
  # Will only add/update files on the remote, not delete.
  # TODO The files in the volumes dir need to be accessed by the user inside
  # the container which may have a different uid to the host user, thus we
  # need to open up read to g and o
- name: "Copy and template .j2 files from {{ config_files_and_templates_dir }}/ to {{ stack_volumes_dir }}/"
  template:
    src: "{{ item.src }}"
    dest: "{{ stack_volumes_dir }}/{{ item.path | regex_replace('.j2$','') }}"
    mode: "u=rw,g=r,o=r"
    backup: true
  with_filetree: "{{ config_files_and_templates_dir }}/"
  loop_control:
    label: "{{ item.path }}"
  when: _config_files_and_templates_dir_info.stat.exists 
        and item.state == 'file' 
        and item.path is match('.*\.j2$')
        and item.path is not match('.*\.gitkeep$') # Ignore .gitkeep files used to maintain empty dirs
  tags:
    - deploy
    - configure


