---
ansible_connection: ssh

# The user that ansible will connect as, must have sudo rights to 'sudo su -'.
# The user should have passwordless sudo and an ssh key pair that has already
# been set up on the remote host(s). The ssh key to use can be set on the command line
# using '--private-key=~/.ssh/my_private_key_id_rsa'
ansible_user: centos

# The name of the stack to deploy
stack_name: "stroom_core_test"

# The version of the stack to deploy
stack_version: "v7.0-beta.96-2"

# The path on a file server where the stack archive file can be found
stroom_stack_archive_url_base: "https://github.com/gchq/stroom-resources/releases/download/stroom-stacks-{{ stack_version }}"

# The local directory where the stack configuration is kept.
# This directory should be under source control.
# IMPORTANT: This is relative to the playbook being run.
local_config_dir: "../config/single_node_stroom_core_stack/example_inventory"

# The user that stroom-proxy will run as
stroom_user: "stroomuser"

# The directory where stroom-proxy will be installed on the remote host
stack_install_root_dir: "/home/{{ stroom_user }}"

# Set to true to delete all the self signed development certificates
remove_development_certificates: false

# The public hostname of the nginx API gateway
# If you have DNS in place then either hard code it here or get it from the inventory file
# in a similar way to this. If you have no DNS then use an IP that is resolvable from
# outside the host and from inside the containers.
# public_ip_address can be added to the inventory to allow this to work with vagrant locally when there is no DNS
nginx_advertised_host: "{{ hostvars[groups['stroom_core_stack'][0]]['public_ip_address'] | default(inventory_hostname) }}"

# Key/value pairs to set in the stack env file.  These will replace existing
# values in the env file or add a new line if the name doesn't already exist.
# It is debatable if we should hold a jinja2 template for this file or use this
# apporach

stack_env_host_ip: "{{ nginx_advertised_host }}"
stack_env_db_host_ip: "{{ nginx_advertised_host }}"
stack_env_nginx_advertised_host: "{{ nginx_advertised_host }}"
stack_env_docker_host_hostname: "{{ nginx_advertised_host }}"
stack_env_docker_host_ip: "{{ nginx_advertised_host }}"

#stack_env_nginx_ssl_certificate_key: "example.server.key"
#stack_env_nginx_ssl_certificate: "example.server.cert"
#stack_env_nginx_ssl_ca_certificate: "example.ca.cert"

#stack_env_stroom_nginx_docker_repo: "gchq/stroom-nginx"
#stack_env_stroom_proxy_docker_repo: "gchq/stroom-proxy"

#stack_env_stroom_proxy_remote_client_keystore_password: "a new password"
#stack_env_stroom_proxy_remote_client_keystore_path: "/stroom-proxy/certs/example.client.jks"

#stack_env_stroom_proxy_remote_client_truststore_password: "a new password"
#stack_env_stroom_proxy_remote_client_truststore_path: "/stroom-proxy/certs/example.ca.jks"

#stack_env_stroom_proxy_remote_feed_status_api_key: "eyJhbG......ciOwd7Q"
#stack_env_stroom_proxy_remote_feed_status_url: "https://downstream-stroom-or-proxy.some.domain/api/proxy/feedStatus/v1"

#stack_env_stroom_proxy_remote_forward_url: "https://downstream-stroom-or-proxy.some.domain/stroom/datafeed"

  ## Use same (key|trust)store for client and forwarding
#stack_env_stroom_proxy_remote_forwarding_keystore_password: "a new password"
#stack_env_stroom_proxy_remote_forwarding_keystore_path: "/stroom-proxy/certs/example.client.jks"

#stack_env_stroom_proxy_remote_forwarding_truststore_password: "a new password"
#stack_env_stroom_proxy_remote_forwarding_truststore_path: "/stroom-proxy/certs/example.ca.jks"

# vim: set filetype=yaml shiftwidth=2 tabstop=2 expandtab:
