Vagrant.configure("2") do |config|

  @ip_counter=10
  def get_ip()
    @ip_counter += 1
    "192.168.56.#{@ip_counter}"
  end

  # A mixed economy deployment
  # TODO Only allows a host to belong to one group, but that should
  # be fine for now.
  servers=[
    {
      :hostname => "stroom-and-proxy-host-1",
      :ip => get_ip(),
      :group => "stroom_and_proxy"
    },
    {
      :hostname => "stroom-and-proxy-host-2",
      :ip =>get_ip(),
      :group => "stroom_and_proxy"
    },
    {
      :hostname => "stroom-services-stack-host",
      :ip =>get_ip(),
      :group => "stroom_services_stack"
    },
    {
      :hostname => "stroom-database-host",
      :ip =>get_ip(),
      :group => "stroom_database"
    },
  ]

  servers.each do |machine|
    config.vm.define machine[:hostname] do |node|
      node.vm.box = "rockylinux/9"
      node.vm.hostname = machine[:hostname]
      node.vm.network "private_network", ip: machine[:ip]

      node.vm.provider "virtualbox" do |vb|
        vb.memory = "3096"
        vb.cpus = "2"
      end

    end
  end

  config.vm.provision "ansible" do |ansible|
    ansible.compatibility_mode = "2.0"
    ansible.verbose = "v"
    # Noddy playbook so we can generate an inventory
    ansible.playbook = "vagrant_playbook.yml"

    ansible.groups = { }
    ansible.host_vars = { }

    $stdout.puts "Ansible hosts:"
    servers.each do |machine|
      group = machine[:group]
      hostname = machine[:hostname]
      $stdout.puts "  hostname: #{hostname}, ip: #{machine[:ip]}, group: #{group},"

      if !ansible.groups.key?(group)
        # No key for this group so create an empty array
        ansible.groups[group] = []
      end
      # Add this host to the group
      ansible.groups[group].push(hostname)

      # Add our fixed IP as a host_var so we can access it in ansible
      # This is because ansible_host gets set to 127.0.0.1 as vagrant has
      # some funky port forwearding approach to connecting to the hosts
      ansible.host_vars[machine[:hostname]] = {
        "public_ip_address" => machine[:ip],
      }
    end

    $stdout.puts "Ansible groups:"
    ansible.groups.each_pair do |key,value|
      $stdout.puts "  #{key}: #{value}"
    end
  end
end

# vim: set tabstop=2 shiftwidth=2 expandtab filetype=ruby:
